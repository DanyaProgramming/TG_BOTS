from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.enums import ParseMode
import sqlite3
import os

TOKEN = '7772231526:AAEV4JrEcBzmJ4Fuw81lUGV9RUvyJTShx00'
bot = Bot(token=TOKEN)
dp = Dispatcher()
admin_router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_IDS = [6591961224]  # ‚ùóÔ∏è–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–ï–õ–ï–ì–†–ê–ú ID (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)‚ùóÔ∏è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('bot_db.sqlite')
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS admins (
                 user_id INTEGER PRIMARY KEY)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
    c.execute('''CREATE TABLE IF NOT EXISTS allowed_users (
                 user_id INTEGER PRIMARY KEY)''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        c.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (admin_id,))
    
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    conn = sqlite3.connect('bot_db.sqlite')
    c = conn.cursor()
    c.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    result = c.fetchone() is not None
    conn.close()
    return result

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–∫–∞–º
def has_access(user_id: int) -> bool:
    conn = sqlite3.connect('bot_db.sqlite')
    c = conn.cursor()
    c.execute("SELECT 1 FROM allowed_users WHERE user_id = ?", (user_id,))
    result = c.fetchone() is not None
    conn.close()
    return result

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def user_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–¥–∞—á–∞ –≤—Ü"), KeyboardButton(text="–ü–∞–∫–∏ –¥–µ–≤—É—à–µ–∫")],
            [KeyboardButton(text="–û–±—É—á–µ–Ω–∏–µ —Å–∫–∞–º–∞"), KeyboardButton(text="–†–µ–∫–≤–∏–∑–∏—Ç—ã")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–∞"), KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ==================

@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def add_access_handler(message: types.Message):
    await message.reply(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
        "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /add_access\n"
        "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /add_access <user_id>",
        reply_markup=admin_keyboard()
    )

@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def remove_access_handler(message: types.Message):
    await message.reply(
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
        "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /remove_access\n"
        "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /remove_access <user_id>",
        reply_markup=admin_keyboard()
    )

@admin_router.message(F.text == "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–∞")
async def list_access_handler(message: types.Message):
    conn = sqlite3.connect('bot_db.sqlite')
    c = conn.cursor()
    c.execute("SELECT user_id FROM allowed_users")
    users = c.fetchall()
    conn.close()
    
    if users:
        user_list = "\n".join([f"üÜî {user[0]}" for user in users])
        response = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º:\n{user_list}"
    else:
        response = "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º"
    
    await message.reply(response, reply_markup=admin_keyboard())

@admin_router.message(F.text == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: types.Message):
    await message.reply(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=user_keyboard()
    )

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
@dp.message(Command("add_access"))
async def add_access_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        conn = sqlite3.connect('bot_db.sqlite')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO allowed_users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()
        return await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ '–ü–∞–∫–∞–º –¥–µ–≤—É—à–µ–∫'")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ID –≤ –∫–æ–º–∞–Ω–¥–µ
    try:
        user_id = int(message.text.split()[1])
        conn = sqlite3.connect('bot_db.sqlite')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO allowed_users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø")
    except (IndexError, ValueError):
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/add_access <user_id>\n–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message(Command("remove_access"))
async def remove_access_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        conn = sqlite3.connect('bot_db.sqlite')
        c = conn.cursor()
        c.execute("DELETE FROM allowed_users WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        return await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∏—à–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ID –≤ –∫–æ–º–∞–Ω–¥–µ
    try:
        user_id = int(message.text.split()[1])
        conn = sqlite3.connect('bot_db.sqlite')
        c = conn.cursor()
        c.execute("DELETE FROM allowed_users WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∏—à–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
    except (IndexError, ValueError):
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/remove_access <user_id>\n–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    welcome_text = """
    üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nevna Tim!* üåü
    
    –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≥–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:
    """
    reply_markup = user_keyboard()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if is_admin(message.from_user.id):
        reply_markup.keyboard.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    await message.reply(
        text=welcome_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

@dp.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await message.reply(
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=admin_keyboard()
    )

@dp.message(F.text == "–°–¥–∞—á–∞ –≤—Ü")
async def fruits_info(message: types.Message):
    text = """**@nevnarkotikax** –ù–ï –°–ü–ê–ú–ò–¢–¨"""
    await message.reply(text, parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text == "–ü–∞–∫–∏ –¥–µ–≤—É—à–µ–∫")
async def girls_packs(message: types.Message):
    if not has_access(message.from_user.id):
        await message.reply(
            "‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    text = """[–ü–∞–∫1](https://t.me/+2ZF2Fgoa-MQ5OGQ6)
[–ü–∞–∫2](https://t.me/+ZipAG9ZnpmI1MGIy)
[–ü–∞–∫3](https://t.me/+H4mbXUlkIDI3NDgy)
[–ü–∞–∫4](https://t.me/+n5I0aiQ6HKY1MjYy)
[–ü–∞–∫5](https://t.me/+n5I0aiQ6HKY1MjYy)
[–ü–∞–∫5](https://t.me/+ipAgHmA34Xs5M2Zi)
[–ñ–µ—Å—Ç—ã](https://t.me/+S1Oanqp5T5Q0OWYy)"""
    await message.reply(text, parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text == "–û–±—É—á–µ–Ω–∏–µ —Å–∫–∞–º–∞")
async def scam_training(message: types.Message):
    text = """*https://t.me/hehejdndnej*"""
    await message.reply(text, parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text == "–†–µ–∫–≤–∏–∑–∏—Ç—ã")
async def requisites(message: types.Message):
    text = """*2200701990347772*
–ö–∞—Ä—Ç–∞ –¥—Ä–æ–ø, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ @nevnarkotikax"""
    await message.reply(text, parse_mode=ParseMode.MARKDOWN)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
dp.include_router(admin_router)

if __name__ == '__main__':
    dp.run_polling(bot)
